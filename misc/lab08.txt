import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, precision_score, recall_score, f1_score

iris = load_iris()
data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
data['target'] = iris.target
X = data.drop('target', axis=1)
y = data['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=42)

k = 3 
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(f'Accuracy: {accuracy_score(y_test, y_pred):.2f}')
print(f'Precision: {precision_score(y_test, y_pred, average='weighted'):.2f}')
print(f'Recall: {recall_score(y_test, y_pred, average='weighted'):.2f}')
print(f'F1 Score: {f1_score(y_test, y_pred, average='weighted'):.2f}')

print("\nClassification Report:\n", classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix: \n", cm)

correct_predictions = []
wrong_predictions = []

for i in range(len(y_test)):
    if y_test.iloc[i] == y_pred[i]:
        correct_predictions.append((X_test.iloc[i].tolist(), y_test.iloc[i], y_pred[i]))
    else:
        wrong_predictions.append((X_test.iloc[i].tolist(), y_test.iloc[i], y_pred[i]))

print("\nCorrect Predictions:")

for cp in correct_predictions:
    print(f"Features: {cp[0]}, True Label: {cp[1]}, Predicted Label: {cp[2]}")

print("\nWrong Predictions:")

for wp in wrong_predictions:
    print(f"Features: {wp[0]}, True Label: {wp[1]}, Predicted Label: {wp[2]}")
